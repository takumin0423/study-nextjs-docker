# Dockerfile for Development Environment

# Node.js 20-alpine をベースイメージとして使用（slimよりもセキュアで軽量）
FROM node:20-alpine AS base

# セキュリティ向上のため非rootユーザーを作成
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 必要なシステムパッケージをインストール（開発に必要なツール含む）
RUN apk add --no-cache libc6-compat curl git

# 環境変数 PNPM_HOME を設定 (pnpm のインストール先)
ENV PNPM_HOME="/pnpm"
# 環境変数 PATH に PNPM_HOME を追加
ENV PATH="${PNPM_HOME}:${PATH}"
# corepack を有効化 (Node.js に同梱されている pnpm を使用可能にする)
RUN corepack enable

# 作業ディレクトリを /app に設定
WORKDIR /app

# package.json と pnpm-lock.yaml を先にコピー（レイヤーキャッシュ最適化）
COPY package.json pnpm-lock.yaml ./

# pnpm のキャッシュを利用して依存関係をフェッチ (開発用なので --prod は付けない)
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm fetch

# pnpm のキャッシュを利用して依存関係をインストール (lockfile に基づく)
# 開発用なので devDependencies も含めてインストールされる
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# プロジェクト全体のファイルをコピー (ソースコード)
COPY . .

# ファイルの所有者を nextjs ユーザーに変更
RUN chown -R nextjs:nodejs /app

# 非rootユーザーに切り替え（セキュリティ向上）
USER nextjs

# Node.js 環境を 'development' に設定
ENV NODE_ENV=development
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# アプリケーションがリッスンするポートを指定 (Next.js 開発サーバーのデフォルト)
EXPOSE 3000

# ヘルスチェックを追加（開発環境用）
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# コンテナ起動時に実行するコマンド (Next.js 開発サーバーを起動)
CMD ["pnpm", "run", "dev"]

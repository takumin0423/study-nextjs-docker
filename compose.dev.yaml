services:
  web: # Next.js アプリケーションサービス (開発用)
    build:
      context: . # ビルドコンテキスト (プロジェクトルート)
      dockerfile: Dockerfile.dev # 使用する Dockerfile (開発用)
    container_name: next-app-dev # 開発用コンテナ名
    ports:
      - "3000:3000" # ホストの3000ポートをコンテナの3000ポートにマッピング
      - "9229:9229" # Node.js デバッガーポート
    volumes:
      # ホストのカレントディレクトリをコンテナの /app にマウント (ソースコードのホットリロードのため)
      - .:/app
      # ホストの node_modules がコンテナ内の node_modules を上書きしないようにするための匿名ボリューム
      # (コンテナ内で pnpm install した node_modules を使用する)
      - /app/node_modules
      # pnpm のキャッシュを永続化するための名前付きボリューム (ビルド高速化のため)
      - pnpm-store:/pnpm/store
    depends_on: # 依存関係
      db: # compose.yaml で定義された db サービスに依存
        condition: service_healthy # db サービスが healthy 状態になってから起動する
    environment: # 環境変数
      NODE_ENV: development # Node.js 環境を 'development' に設定
      PORT: "3000" # アプリケーションがリッスンするポート
      HOSTNAME: "0.0.0.0" # バインドするホスト名
      NEXT_TELEMETRY_DISABLED: "1" # テレメトリを無効化
      # ローカルDBコンテナへの接続情報 ( .env ファイルから読み込まれる想定 )
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASS}@db:5432/${DB_NAME}"
      # Node.jsデバッグオプション
      NODE_OPTIONS: "--inspect=0.0.0.0:9229"
    # 開発環境ではセキュリティ設定を緩和（読み取り専用ファイルシステムを無効化）
    read_only: false # 開発環境では書き込みが必要
    # リソース制限（開発環境用）
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    # ヘルスチェック（開発環境では無効化）
    healthcheck:
      disable: true

volumes:
  pnpm-store: # pnpm のキャッシュを永続化するための名前付きボリューム
    driver: local
